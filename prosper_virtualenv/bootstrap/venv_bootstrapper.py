#!/usr/bin/env python3
'''venv_bootstrapper.py: uses virtualenv bootstrap functionality
    Sets up basic requirements for any Prosper project
    https://virtualenv.pypa.io/en/stable/reference/?highlight=bootstrap#creating-your-own-bootstrap-scripts'''

from os import path
import sys
from configparser import ConfigParser, ExtendedInterpolation

import virtualenv
from plumbumb import local

CURRENT_DIR = path.abspath(path.dirname(__file__))
CONFIG_PATH = path.join(CURRENT_DIR, 'bootstrap.cfg')

def get_config(config_file=CONFIG_PATH):
    '''parse config file for global vars'''
    local_config = ConfigParser(
        interpolation=ExtendedInterpolation(),
        allow_no_value=True,
        delimiters=('='),
        inline_comment_prefixes=('#')
    )

    try:
        with open(config_file, 'r') as cfg_filehandle:
            local_config.read_file(cfg_filehandle)

        return local_config
    except Exception as error_msg:
        print(
            'EXCEPTION: unable to parse config file' + \
            '\r\texception={0}'.format(error_msg) + \
            '\r\tconfig_file={0}'.format(config_file)
        )
        exit(-1)

CONFIG = get_config()

###   vv AUTOGENERATED SCRIPT SEED vv   ###
### NOTE: block not linted              ###
### Extend EXTRA_TEXT over code block   ###
### !!ALL PASSED IN VALUES ARE STATIC!! ###

EXTRA_TEXT = '''

'''.format(
    None
)

###   ^^ AUTOGENERATED SCRIPT SEED ^^   ###


def main():
    '''runs create_boostrap_script functionality and spits out new virtualenv script'''
    bootstrap_script = virtualenv.create_bootstrap_script(
        EXTRA_TEXT,
        python_version=CONFIG.get('environment', 'python_version')
    )

    result_script = CONFIG.get('bootstrap', 'result_script_name')
    result_path = CONFIG.get('bootstrap', 'result_path')

    result_abspath = None
    if '..' in result_path:
        local.cwd.chdir(CURRENT_DIR)
        result_abspath = local.path(result_path)
    else:
        result_abspath = local.path(result_path)

    current_text = ''
    if local.path.is_file(result_abspath):
        print('--PULLING EXISTING BOOTSTRAP SCRIPT--')
        with open(result_abspath, 'r') as filehandle:
            current_text = filehandle.read()
    else:
        print('--NO BOOTSTRAP FOUND--')

    if current_text == bootstrap_script:
        print('--NO UPDATE BOOTSTRAP SCRIPT--')
    else:
        print('--UPDATING BOOTSTRAP SCRIPT--')
        with open(result_abspath, 'w') as filehandle:
            filehandle.write(bootstrap_script)


if __name__ == '__main__':
    main()
